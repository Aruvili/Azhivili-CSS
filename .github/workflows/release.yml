name: Release Tamil CSS Framework

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-prerelease: ${{ steps.version.outputs.prerelease }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          if [[ $VERSION == *"-"* ]]; then
            echo "prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "prerelease=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Validate version format
        run: |
          if [[ ! "${{ steps.version.outputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
            echo "❌ Invalid version format: ${{ steps.version.outputs.version }}"
            exit 1
          fi
          echo "✅ Valid version format: ${{ steps.version.outputs.version }}"

  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Update version in package.json
        run: npm version ${{ needs.validate.outputs.version }} --no-git-tag-version
        
      - name: Build framework
        run: npm run build:all
        
      - name: Run comprehensive tests
        run: npm test
        
      - name: Generate build report
        run: |
          echo "# 🚀 Release Build Report" > build-report.md
          echo "" >> build-report.md
          echo "## Version: v${{ needs.validate.outputs.version }}" >> build-report.md
          echo "## Build Date: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> build-report.md
          echo "" >> build-report.md
          echo "## 📦 File Sizes" >> build-report.md
          echo "| File | Size | Gzipped |" >> build-report.md
          echo "|------|------|---------|" >> build-report.md
          
          for file in dist/*.css; do
            if [ -f "$file" ]; then
              SIZE=$(du -h "$file" | cut -f1)
              GZIPPED=$(gzip -c "$file" | wc -c | numfmt --to=iec)
              FILENAME=$(basename "$file")
              echo "| $FILENAME | $SIZE | $GZIPPED |" >> build-report.md
            fi
          done
          
          echo "" >> build-report.md
          echo "## 🎯 Features" >> build-report.md
          echo "- ✅ Tamil class names" >> build-report.md
          echo "- ✅ Responsive utilities" >> build-report.md
          echo "- ✅ Modern CSS features" >> build-report.md
          echo "- ✅ Production optimized" >> build-report.md
          echo "- ✅ Source maps included" >> build-report.md
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-build
          path: |
            dist/
            build-report.md
            package.json
          retention-days: 30

  publish-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [validate, build-and-test]
    environment: npm-publish
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-build
          
      - name: Publish to NPM (Release)
        if: needs.validate.outputs.is-prerelease == 'false'
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Publish to NPM (Prerelease)
        if: needs.validate.outputs.is-prerelease == 'true'
        run: npm publish --access public --tag beta
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Verify NPM publication
        run: |
          sleep 30  # Wait for NPM to propagate
          npm view azhivili-css@${{ needs.validate.outputs.version }} version

  publish-github:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate, build-and-test, publish-npm]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-build
          
      - name: Generate changelog
        id: changelog
        run: |
          echo "# 📋 Changelog for v${{ needs.validate.outputs.version }}" > changelog.md
          echo "" >> changelog.md
          
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            echo "## Changes since $LAST_TAG" >> changelog.md
            git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD >> changelog.md
          else
            echo "## Initial Release" >> changelog.md
            echo "- 🎉 First release of அழிவிலி-CSS Framework" >> changelog.md
          fi
          
          echo "" >> changelog.md
          echo "## 📦 Assets" >> changelog.md
          echo "- \`azhivili-css.css\` - Expanded version with source maps" >> changelog.md
          echo "- \`azhivili-css.min.css\` - Minified production version" >> changelog.md
          echo "" >> changelog.md
          echo "## 🚀 Installation" >> changelog.md
          echo "\`\`\`bash" >> changelog.md
          echo "npm install azhivili-css@${{ needs.validate.outputs.version }}" >> changelog.md
          echo "\`\`\`" >> changelog.md
          echo "" >> changelog.md
          echo "## 🌐 CDN" >> changelog.md
          echo "\`\`\`html" >> changelog.md
          echo "<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/azhivili-css@${{ needs.validate.outputs.version }}/dist/azhivili-css.min.css\">" >> changelog.md
          echo "\`\`\`" >> changelog.md
          
      - name: Create ZIP archive
        run: |
          zip -r azhivili-css-v${{ needs.validate.outputs.version }}.zip dist/ README.md LICENSE CHANGELOG.md
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.validate.outputs.version }}
          name: "அழிவிலி-CSS v${{ needs.validate.outputs.version }}"
          body_path: changelog.md
          draft: false
          prerelease: ${{ needs.validate.outputs.is-prerelease }}
          files: |
            dist/azhivili-css.css
            dist/azhivili-css.min.css
            azhivili-css-v${{ needs.validate.outputs.version }}.zip
            build-report.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-cdn:
    name: Update CDN Cache
    runs-on: ubuntu-latest
    needs: [validate, publish-npm, publish-github]
    steps:
      - name: Purge jsDelivr cache
        run: |
          curl -X POST "https://purge.jsdelivr.net/npm/azhivili-css@${{ needs.validate.outputs.version }}/dist/azhivili-css.min.css"
          curl -X POST "https://purge.jsdelivr.net/npm/azhivili-css@${{ needs.validate.outputs.version }}/dist/azhivili-css.css"
          
      - name: Verify CDN availability
        run: |
          sleep 60  # Wait for CDN to update
          curl -f "https://cdn.jsdelivr.net/npm/azhivili-css@${{ needs.validate.outputs.version }}/dist/azhivili-css.min.css" > /dev/null
          echo "✅ CDN updated successfully"

  notify:
    name: Post-Release Notifications
    runs-on: ubuntu-latest
    needs: [validate, publish-npm, publish-github, update-cdn]
    if: always()
    steps:
      - name: Notify success
        if: needs.publish-npm.result == 'success' && needs.publish-github.result == 'success'
        run: |
          echo "🎉 Release v${{ needs.validate.outputs.version }} published successfully!"
          echo "📦 NPM: https://www.npmjs.com/package/azhivili-css"
          echo "🐙 GitHub: https://github.com/${{ github.repository }}/releases/tag/v${{ needs.validate.outputs.version }}"
          echo "🌐 CDN: https://cdn.jsdelivr.net/npm/azhivili-css@${{ needs.validate.outputs.version }}/dist/azhivili-css.min.css"
          
      - name: Notify failure
        if: needs.publish-npm.result == 'failure' || needs.publish-github.result == 'failure'
        run: |
          echo "❌ Release v${{ needs.validate.outputs.version }} failed!"
          echo "Check the workflow logs for details."
          exit 1
